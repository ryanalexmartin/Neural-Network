{"version":3,"file":"scene.js","names":["Detector","webgl","addGetWebGLMessage","container","stats","scene","light","camera","cameraCtrl","renderer","WIDTH","window","innerWidth","HEIGHT","innerHeight","pixelRatio","devicePixelRatio","screenRatio","clock","THREE","Clock","FRAME_COUNT","sceneSettings","pause","bgColor","enableGridHelper","enableAxisHelper","document","getElementById","Scene","PerspectiveCamera","OrbitControls","object","position","y","enabled","update","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","setClearColor","autoClear","appendChild","domElement","aspect","updateProjectionMatrix"],"sources":["../scene.js"],"sourcesContent":["// var GSAP = require('gsap');\n// var SVG = require('svg.js');\n\n// Scene --------------------------------------------------------\n/* exported updateHelpers */\n\nif (!Detector.webgl) {\n\tDetector.addGetWebGLMessage();\n}\n\nvar container, stats;\nvar scene, light, camera, cameraCtrl, renderer;\nvar WIDTH = window.innerWidth;\nvar HEIGHT = window.innerHeight;\nvar pixelRatio = window.devicePixelRatio || 1;\nvar screenRatio = WIDTH / HEIGHT;\nvar clock = new THREE.Clock();\nvar FRAME_COUNT = 0;\n\n// ---- Settings\nvar sceneSettings = {\n\tpause: false,\n\tbgColor: 0x010c14,\n\tenableGridHelper: false,\n\tenableAxisHelper: false\n};\n\n// ---- Scene\ncontainer = document.getElementById('canvas-container');\nscene = new THREE.Scene();\n\n// ---- Camera\ncamera = new THREE.PerspectiveCamera(75, screenRatio, 10, 5000);\n// camera orbit control\ncameraCtrl = new THREE.OrbitControls(camera, container);\ncameraCtrl.object.position.y = 1;\ncameraCtrl.enabled = false;\ncameraCtrl.update();\n\n// ---- Renderer\nrenderer = new THREE.WebGLRenderer({\n\tantialias: true,\n\talpha: true\n});\nrenderer.setSize(WIDTH, HEIGHT);\nrenderer.setPixelRatio(pixelRatio);\nrenderer.setClearColor(sceneSettings.bgColor, 1);\nrenderer.autoClear = false;\ncontainer.appendChild(renderer.domElement);\n\n// ---- Resize once to match browser's initial size\ncamera.aspect = screenRatio;\ncamera.updateProjectionMatrix();\nrenderer.setSize(WIDTH, HEIGHT);\nrenderer.setPixelRatio(pixelRatio);\n\n// ---- Stats\n// stats = new Stats();\n// container.appendChild( stats.domElement );\n\n// ---- grid & axis helper\n// var gridHelper = new THREE.GridHelper( 600, 50 );\n// gridHelper.setColors( 0x00bbff, 0xffffff );\n// gridHelper.material.opacity = 0.1;\n// gridHelper.material.transparent = true;\n// gridHelper.position.y = -300;\n// scene.add( gridHelper );\n\n// var axisHelper = new THREE.AxisHelper( 50 );\n// scene.add( axisHelper );\n\n// function updateHelpers() {\n// \taxisHelper.visible = sceneSettings.enableAxisHelper;\n// \tgridHelper.visible = sceneSettings.enableGridHelper;\n// }\n\n/*\n// ---- Lights\n// back light\nlight = new THREE.DirectionalLight( 0xffffff, 0.8 );\nlight.position.set( 100, 230, -100 );\nscene.add( light );\n\n// hemi\nlight = new THREE.HemisphereLight( 0x00ffff, 0x29295e, 1 );\nlight.position.set( 370, 200, 20 );\nscene.add( light );\n\n// ambient\nlight = new THREE.AmbientLight( 0x111111 );\nscene.add( light );\n*/\n\n\n\n// vector animation (new)\n\n\n// function createParticlesFromImage(imageTexture) {\n// \t// Create a canvas to draw the image\n// \tvar canvas = document.createElement('canvas');\n// \tvar context = canvas.getContext('2d');\n\n// \t// Draw the image onto the canvas\n// \tcanvas.width = imageTexture.image.width;\n// \tcanvas.height = imageTexture.image.height;\n// \tcontext.drawImage(imageTexture.image, 0, 0, canvas.width, canvas.height);\n\n// \t// Get the image data from the canvas\n// \tvar imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n// \tvar data = imageData.data;\n\n// \t// Create the particle system geometry\n// \tvar geometry = new THREE.Geometry();\n\n// \t// For each pixel in the image, create a vertex in the geometry\n// \tfor (var y = 0; y < canvas.height; y++) {\n// \t\tfor (var x = 0; x < canvas.width; x++) {\n// \t\t\t// Get the color of the pixel\n// \t\t\tvar index = (y * canvas.width + x) * 4;\n// \t\t\tvar red = data[index];\n// \t\t\tvar green = data[index + 1];\n// \t\t\tvar blue = data[index + 2];\n\n// \t\t\t// Create a new vertex for the particle system\n// \t\t\tvar vertex = new THREE.Vector3(x - canvas.width / 2, -y + canvas.height / 2, 0);\n\n// \t\t\t// Set the color of the vertex based on the color of the pixel\n// \t\t\tvertex.color = new THREE.Color('rgb(' + red + ',' + green + ',' + blue + ')');\n\n// \t\t\t// Add the vertex to the geometry\n// \t\t\tgeometry.vertices.push(vertex);\n// \t\t}\n// \t}\n\n// \t// Create the material for the particle system\n// \tvar material = new THREE.PointCloudMaterial({\n// \t\tsize: 1,\n// \t\tvertexColors: THREE.VertexColors, // This allows us to use the colors we set for each vertex\n// \t\tmap: imageTexture, // This texture will be applied to each particle\n// \t\ttransparent: true\n// \t});\n\n// \t// Create the particle system and return it\n// \tvar particles = new THREE.PointCloud(geometry, material);\n// \treturn particles;\n// }\n\n// function convertSVGToThreeJS(svgString) {\n// \tconst objects = [];\n\n// \t// Parse the SVG string into an SVG document\n// \tconst parser = new DOMParser();\n// \tconst svgDoc = parser.parseFromString(svgString, \"image/svg+xml\");\n\n// \t// Loop through each child element of the SVG document\n// \tsvgDoc.childNodes.forEach(childNode => {\n// \t\t// Create a new object for each child element\n// \t\tconst object = new THREE.Object3D();\n\n// \t\t// Set the position of the object based on the child element's attributes\n// \t\tobject.position.x = parseFloat(childNode.getAttribute(\"x\")) || 0;\n// \t\tobject.position.y = parseFloat(childNode.getAttribute(\"y\")) || 0;\n// \t\tobject.position.z = parseFloat(childNode.getAttribute(\"z\")) || 0;\n\n// \t\t// Set the rotation of the object based on the child element's attributes\n// \t\tobject.rotation.x = parseFloat(childNode.getAttribute(\"rx\")) || 0;\n// \t\tobject.rotation.y = parseFloat(childNode.getAttribute(\"ry\")) || 0;\n// \t\tobject.rotation.z = parseFloat(childNode.getAttribute(\"rz\")) || 0;\n\n// \t\t// Set the scale of the object based on the child element's attributes\n// \t\tobject.scale.x = parseFloat(childNode.getAttribute(\"scale-x\")) || 1;\n// \t\tobject.scale.y = parseFloat(childNode.getAttribute(\"scale-y\")) || 1;\n// \t\tobject.scale.z = parseFloat(childNode.getAttribute(\"scale-z\")) || 1;\n\n// \t\t// Add the object to the array\n// \t\tobjects.push(object);\n// \t});\n\n// \treturn objects;\n// }\n\n\n\n// Assuming your Three.js scene, camera, and renderer are already set up, \n// you would have something like the following in your code:\n\n// const scene = existing scene\n// const camera = existing camera\n// const renderer = existing renderer\n\n// const networkSVG = SVG.get('sprites/nn(2).svg');\n// var loader = new THREE.TextureLoader();\n\n// loader.load(\n// \t// resource URL\n// \t\"sprites/img_4721.png\",\n\n// \t// onLoad callback\n// \tfunction (texture) {\n// \t\t// the texture is fully loaded at this point\n\n// \t\t// Convert Image to Particles\n// \t\tconst particles = createParticlesFromImage(texture);\n\n// \t\tscene.add(particles);\n\n// \t\t// Convert SVG to Three.js objects\n// \t\t// const networkObjects = convertSVGToThreeJS(networkSVG);\n// \t\t// networkObjects.forEach(function (object) {\n// \t\t// \tscene.add(object);\n// \t\t// });\n\n// \t\t// Position camera to view the whole scene\n// \t\tcamera.position.z = 5; // adjust this value to fit your specific scene\n\n// \t\t// Create Animation Timeline\n// \t\t// const timeline = GSAP.timeline();\n\n// \t\ttimeline.to(particles.material.opacity, { value: 0, duration: 2 });\n// \t\ttimeline.call(animateParticlesThroughNetwork, [particles, networkSVG], \"+=2\");\n// \t\ttimeline.call(reformImageFromParticles, [particles], \"+=2\");\n\n// \t\t// If your animation loop is already running, just add GSAP.tick(); to it\n// \t\tfunction animate() {\n// \t\t\tGSAP.tick();\n// \t\t\trenderer.render(scene, camera);\n// \t\t\trequestAnimationFrame(animate);\n// \t\t}\n\n// \t\t// assuming 'scene' is your THREE.Scene instance\n// \t\tscene.add(particles);\n// \t},\n\n// \t// onProgress callback currently not supported\n// \tundefined,\n\n// \t// onError callback\n// \tfunction () {\n// \t\tconsole.error('An error occurred while loading the texture');\n// \t}\n// );\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA,IAAI,CAACA,QAAQ,CAACC,KAAK,EAAE;EACpBD,QAAQ,CAACE,kBAAkB,CAAC,CAAC;AAC9B;AAEA,IAAIC,SAAS,EAAEC,KAAK;AACpB,IAAIC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,UAAU,EAAEC,QAAQ;AAC9C,IAAIC,KAAK,GAAGC,MAAM,CAACC,UAAU;AAC7B,IAAIC,MAAM,GAAGF,MAAM,CAACG,WAAW;AAC/B,IAAIC,UAAU,GAAGJ,MAAM,CAACK,gBAAgB,IAAI,CAAC;AAC7C,IAAIC,WAAW,GAAGP,KAAK,GAAGG,MAAM;AAChC,IAAIK,KAAK,GAAG,IAAIC,KAAK,CAACC,KAAK,CAAC,CAAC;AAC7B,IAAIC,WAAW,GAAG,CAAC;;AAEnB;AACA,IAAIC,aAAa,GAAG;EACnBC,KAAK,EAAE,KAAK;EACZC,OAAO,EAAE,QAAQ;EACjBC,gBAAgB,EAAE,KAAK;EACvBC,gBAAgB,EAAE;AACnB,CAAC;;AAED;AACAvB,SAAS,GAAGwB,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;AACvDvB,KAAK,GAAG,IAAIc,KAAK,CAACU,KAAK,CAAC,CAAC;;AAEzB;AACAtB,MAAM,GAAG,IAAIY,KAAK,CAACW,iBAAiB,CAAC,EAAE,EAAEb,WAAW,EAAE,EAAE,EAAE,IAAI,CAAC;AAC/D;AACAT,UAAU,GAAG,IAAIW,KAAK,CAACY,aAAa,CAACxB,MAAM,EAAEJ,SAAS,CAAC;AACvDK,UAAU,CAACwB,MAAM,CAACC,QAAQ,CAACC,CAAC,GAAG,CAAC;AAChC1B,UAAU,CAAC2B,OAAO,GAAG,KAAK;AAC1B3B,UAAU,CAAC4B,MAAM,CAAC,CAAC;;AAEnB;AACA3B,QAAQ,GAAG,IAAIU,KAAK,CAACkB,aAAa,CAAC;EAClCC,SAAS,EAAE,IAAI;EACfC,KAAK,EAAE;AACR,CAAC,CAAC;AACF9B,QAAQ,CAAC+B,OAAO,CAAC9B,KAAK,EAAEG,MAAM,CAAC;AAC/BJ,QAAQ,CAACgC,aAAa,CAAC1B,UAAU,CAAC;AAClCN,QAAQ,CAACiC,aAAa,CAACpB,aAAa,CAACE,OAAO,EAAE,CAAC,CAAC;AAChDf,QAAQ,CAACkC,SAAS,GAAG,KAAK;AAC1BxC,SAAS,CAACyC,WAAW,CAACnC,QAAQ,CAACoC,UAAU,CAAC;;AAE1C;AACAtC,MAAM,CAACuC,MAAM,GAAG7B,WAAW;AAC3BV,MAAM,CAACwC,sBAAsB,CAAC,CAAC;AAC/BtC,QAAQ,CAAC+B,OAAO,CAAC9B,KAAK,EAAEG,MAAM,CAAC;AAC/BJ,QAAQ,CAACgC,aAAa,CAAC1B,UAAU,CAAC;;AAElC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA"}