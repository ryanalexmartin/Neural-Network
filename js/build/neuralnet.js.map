{"version":3,"file":"neuralnet.js","names":["NeuralNetwork","initialized","settings","verticesSkipStep","maxAxonDist","maxConnectionsPerNeuron","signalMinSpeed","signalMaxSpeed","currentMaxSignals","limitSignals","meshComponents","THREE","Object3D","particlePool","ParticlePool","add","components","neurons","allSignals","allAxons","axonOpacityMultiplier","axonColor","axonGeom","BufferGeometry","axonPositions","axonIndices","axonNextPositionsIndex","axonUniforms","color","type","value","Color","opacityMultiplier","axonAttributes","opacity","neuronSizeMultiplier","spriteTextureNeuron","TEXTURES","electric","neuronColor","neuronOpacity","neuronsGeom","Geometry","neuronUniforms","sizeMultiplier","texture","neuronAttributes","size","neuronShaderMaterial","ShaderMaterial","uniforms","attributes","vertexShader","fragmentShader","blending","AdditiveBlending","transparent","depthTest","numNeurons","numAxons","numSignals","numPassive","initNeuralNetwork","prototype","initNeurons","OBJ_MODELS","brain","geometry","vertices","initAxons","SHADER_CONTAINER","neuronVert","neuronFrag","axonShaderMaterial","axonVert","axonFrag","inputVertices","i","length","pos","n","Neuron","x","y","z","push","Math","randFloat","neuronParticles","PointCloud","needsUpdate","allNeuronsLength","j","n1","k","n2","distanceTo","connection","connectedAxon","connectNeuronTo","constructAxonArrayBuffer","renderer","getContext","getExtension","console","error","Uint32Array","Float32Array","axonOpacities","addAttribute","BufferAttribute","computeBoundingSphere","axonMesh","Line","LinePieces","numNotConnected","log","update","deltaTime","ii","currentTime","Date","now","receivedSignal","firedCount","fired","lastSignalRelease","releaseDelay","randInt","releaseSignalAt","resetAllNeurons","s","travel","alive","particle","free","splice","updateInfo","axon","idx","neuron","signals","createSignal","reset","updateSettings","setStyle","set","testChangOpcAttr","opcArr","array"],"sources":["../neuralnet.js"],"sourcesContent":["// Neural Network --------------------------------------------------------\n\nfunction NeuralNetwork() {\n\n\tthis.initialized = false;\n\n\tthis.settings = {\n\t\t/*default\n\t\tverticesSkipStep       : 2,\n\t\tmaxAxonDist            : 10,\n\t\tmaxConnectionsPerNeuron: 6,\n\t\tsignalMinSpeed         : 1.75,\n\t\tsignalMaxSpeed         : 3.25,\n\t\tcurrentMaxSignals      : 3000,\n\t\tlimitSignals           : 10000\n\t\t*/\n\n\t\tverticesSkipStep: 2,\n\t\tmaxAxonDist: 12,\n\t\tmaxConnectionsPerNeuron: 12,\n\t\tsignalMinSpeed: 1.9,\n\t\tsignalMaxSpeed: 3,\n\t\tcurrentMaxSignals: 1000,\n\t\tlimitSignals: 10000\n\n\t};\n\n\tthis.meshComponents = new THREE.Object3D();\n\tthis.particlePool = new ParticlePool( this.settings.limitSignals );\n\tthis.meshComponents.add( this.particlePool.meshComponents );\n\n\t// NN component containers\n\tthis.components = {\n\t\tneurons: [],\n\t\tallSignals: [],\n\t\tallAxons: []\n\t};\n\n\t// axon\n\tthis.axonOpacityMultiplier = 1.5;\n\tthis.axonColor = '#13b6d9';\n\tthis.axonGeom = new THREE.BufferGeometry();\n\tthis.axonPositions = [];\n\tthis.axonIndices = [];\n\tthis.axonNextPositionsIndex = 0;\n\n\tthis.axonUniforms = {\n\t\tcolor: {\n\t\t\ttype: 'c',\n\t\t\tvalue: new THREE.Color( this.axonColor )\n\t\t},\n\t\topacityMultiplier: {\n\t\t\ttype: 'f',\n\t\t\tvalue: this.axonOpacityMultiplier\n\t\t}\n\t};\n\n\tthis.axonAttributes = {\n\t\topacity: {\n\t\t\ttype: 'f',\n\t\t\tvalue: []\n\t\t}\n\t};\n\n\t// neuron\n\tthis.neuronSizeMultiplier = 1;\n\tthis.spriteTextureNeuron = TEXTURES.electric;\n\tthis.neuronColor = '#28b1a0';\n\tthis.neuronOpacity = 0.95;\n\tthis.neuronsGeom = new THREE.Geometry();\n\n\tthis.neuronUniforms = {\n\t\tsizeMultiplier: {\n\t\t\ttype: 'f',\n\t\t\tvalue: this.neuronSizeMultiplier\n\t\t},\n\t\topacity: {\n\t\t\ttype: 'f',\n\t\t\tvalue: this.neuronOpacity\n\t\t},\n\t\ttexture: {\n\t\t\ttype: 't',\n\t\t\tvalue: this.spriteTextureNeuron\n\t\t}\n\t};\n\n\tthis.neuronAttributes = {\n\t\tcolor: {\n\t\t\ttype: 'c',\n\t\t\tvalue: []\n\t\t},\n\t\tsize: {\n\t\t\ttype: 'f',\n\t\t\tvalue: []\n\t\t}\n\t};\n\n\tthis.neuronShaderMaterial = new THREE.ShaderMaterial( {\n\n\t\tuniforms: this.neuronUniforms,\n\t\tattributes: this.neuronAttributes,\n\t\tvertexShader: null,\n\t\tfragmentShader: null,\n\t\tblending: THREE.AdditiveBlending,\n\t\ttransparent: true,\n\t\tdepthTest: false\n\n\t} );\n\n\t// info api\n\tthis.numNeurons = 0;\n\tthis.numAxons = 0;\n\tthis.numSignals = 0;\n\n\tthis.numPassive = 0;\n\n\t// initialize NN\n\tthis.initNeuralNetwork();\n\n}\n\nNeuralNetwork.prototype.initNeuralNetwork = function () {\n\n\tthis.initNeurons( OBJ_MODELS.brain.geometry.vertices );\n\tthis.initAxons();\n\n\tthis.neuronShaderMaterial.vertexShader = SHADER_CONTAINER.neuronVert;\n\tthis.neuronShaderMaterial.fragmentShader = SHADER_CONTAINER.neuronFrag;\n\n\tthis.axonShaderMaterial.vertexShader = SHADER_CONTAINER.axonVert;\n\tthis.axonShaderMaterial.fragmentShader = SHADER_CONTAINER.axonFrag;\n\n\tthis.initialized = true;\n\n};\n\nNeuralNetwork.prototype.initNeurons = function ( inputVertices ) {\n\n\tvar i;\n\tfor ( i = 0; i < inputVertices.length; i += this.settings.verticesSkipStep ) {\n\t\tvar pos = inputVertices[ i ];\n\t\tvar n = new Neuron( pos.x, pos.y, pos.z );\n\t\tthis.components.neurons.push( n );\n\t\tthis.neuronsGeom.vertices.push( n );\n\t\t// dont set neuron's property here because its skip vertices\n\t}\n\n\t// set neuron attributes value\n\tfor ( i = 0; i < this.components.neurons.length; i++ ) {\n\t\tthis.neuronAttributes.color.value[ i ] = new THREE.Color( '#28b1a0' ); // initial neuron color\n\t\tthis.neuronAttributes.size.value[ i ] = THREE.Math.randFloat( 0.75, 3.0 ); // initial neuron size\n\t}\n\n\n\t// neuron mesh\n\tthis.neuronParticles = new THREE.PointCloud( this.neuronsGeom, this.neuronShaderMaterial );\n\tthis.meshComponents.add( this.neuronParticles );\n\n\tthis.neuronShaderMaterial.needsUpdate = true;\n\n};\n\nNeuralNetwork.prototype.initAxons = function () {\n\n\tvar allNeuronsLength = this.components.neurons.length;\n\tfor ( var j = 0; j < allNeuronsLength; j++ ) {\n\t\tvar n1 = this.components.neurons[ j ];\n\t\tfor ( var k = j + 1; k < allNeuronsLength; k++ ) {\n\t\t\tvar n2 = this.components.neurons[ k ];\n\t\t\t// connect neuron if distance is within threshold and limit maximum connection per neuron\n\t\t\tif ( n1 !== n2 && n1.distanceTo( n2 ) < this.settings.maxAxonDist &&\n\t\t\t\tn1.connection.length < this.settings.maxConnectionsPerNeuron &&\n\t\t\t\tn2.connection.length < this.settings.maxConnectionsPerNeuron ) {\n\t\t\t\tvar connectedAxon = n1.connectNeuronTo( n2 );\n\t\t\t\tthis.constructAxonArrayBuffer( connectedAxon );\n\t\t\t}\n\t\t}\n\t}\n\n\t// enable WebGL 32 bit index buffer or get an error\n\tif ( !renderer.getContext().getExtension( \"OES_element_index_uint\" ) ) {\n\t\tconsole.error( \"32bit index buffer not supported!\" );\n\t}\n\n\tvar axonIndices = new Uint32Array( this.axonIndices );\n\tvar axonPositions = new Float32Array( this.axonPositions );\n\tvar axonOpacities = new Float32Array( this.axonAttributes.opacity.value );\n\n\tthis.axonGeom.addAttribute( 'index', new THREE.BufferAttribute( axonIndices, 1 ) );\n\tthis.axonGeom.addAttribute( 'position', new THREE.BufferAttribute( axonPositions, 3 ) );\n\tthis.axonGeom.addAttribute( 'opacity', new THREE.BufferAttribute( axonOpacities, 1 ) );\n\tthis.axonGeom.computeBoundingSphere();\n\n\tthis.axonShaderMaterial = new THREE.ShaderMaterial( {\n\t\tuniforms: this.axonUniforms,\n\t\tattributes: this.axonAttributes,\n\t\tvertexShader: null,\n\t\tfragmentShader: null,\n\t\tblending: THREE.AdditiveBlending,\n\t\tdepthTest: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.axonMesh = new THREE.Line( this.axonGeom, this.axonShaderMaterial, THREE.LinePieces );\n\tthis.meshComponents.add( this.axonMesh );\n\n\n\tvar numNotConnected = 0;\n\tfor ( i = 0; i < allNeuronsLength; i++ ) {\n\t\tif ( !this.components.neurons[ i ].connection[ 0 ] ) {\n\t\t\tnumNotConnected += 1;\n\t\t}\n\t}\n\tconsole.log( 'numNotConnected =', numNotConnected );\n\n};\n\nNeuralNetwork.prototype.update = function ( deltaTime ) {\n\n\tif ( !this.initialized ) return;\n\n\tvar n, ii;\n\tvar currentTime = Date.now();\n\n\t// update neurons state and release signal\n\tfor ( ii = 0; ii < this.components.neurons.length; ii++ ) {\n\n\t\tn = this.components.neurons[ ii ];\n\n\t\tif ( this.components.allSignals.length < this.settings.currentMaxSignals - this.settings.maxConnectionsPerNeuron ) { // limit total signals currentMaxSignals - maxConnectionsPerNeuron because allSignals can not bigger than particlePool size\n\n\t\t\tif ( n.receivedSignal && n.firedCount < 8 ) { // Traversal mode\n\t\t\t\t// if (n.receivedSignal && (currentTime - n.lastSignalRelease > n.releaseDelay) && n.firedCount < 8)  {\t// Random mode\n\t\t\t\t// if (n.receivedSignal && !n.fired )  {\t// Single propagation mode\n\t\t\t\tn.fired = true;\n\t\t\t\tn.lastSignalRelease = currentTime;\n\t\t\t\tn.releaseDelay = THREE.Math.randInt( 100, 1000 );\n\t\t\t\tthis.releaseSignalAt( n );\n\t\t\t}\n\n\t\t}\n\n\t\tn.receivedSignal = false; // if neuron recieved signal but still in delay reset it\n\t}\n\n\t// reset all neurons and when there is no signal and trigger release signal at random neuron\n\tif ( this.components.allSignals.length === 0 ) {\n\n\t\tthis.resetAllNeurons();\n\t\tthis.releaseSignalAt( this.components.neurons[ THREE.Math.randInt( 0, this.components.neurons.length ) ] );\n\n\t}\n\n\t// update and remove dead signals\n\tfor ( var j = this.components.allSignals.length - 1; j >= 0; j-- ) {\n\t\tvar s = this.components.allSignals[ j ];\n\t\ts.travel( deltaTime );\n\n\t\tif ( !s.alive ) {\n\t\t\ts.particle.free();\n\t\t\tfor ( var k = this.components.allSignals.length - 1; k >= 0; k-- ) {\n\t\t\t\tif ( s === this.components.allSignals[ k ] ) {\n\t\t\t\t\tthis.components.allSignals.splice( k, 1 );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// update particle pool vertices\n\tthis.particlePool.update();\n\n\t// update info for GUI\n\tthis.updateInfo();\n\n};\n\nNeuralNetwork.prototype.constructAxonArrayBuffer = function ( axon ) {\n\tthis.components.allAxons.push( axon );\n\tvar vertices = axon.vertices;\n\n\tfor ( var i = 0; i < vertices.length; i++ ) {\n\n\t\tthis.axonPositions.push( vertices[ i ].x, vertices[ i ].y, vertices[ i ].z );\n\n\t\tif ( i < vertices.length - 1 ) {\n\t\t\tvar idx = this.axonNextPositionsIndex;\n\t\t\tthis.axonIndices.push( idx, idx + 1 );\n\n\t\t\tvar opacity = THREE.Math.randFloat( 0.005, 0.2 );\n\t\t\tthis.axonAttributes.opacity.value.push( opacity, opacity );\n\n\t\t}\n\n\t\tthis.axonNextPositionsIndex += 1;\n\t}\n};\n\nNeuralNetwork.prototype.releaseSignalAt = function ( neuron ) {\n\tvar signals = neuron.createSignal( this.particlePool, this.settings.signalMinSpeed, this.settings.signalMaxSpeed );\n\tfor ( var ii = 0; ii < signals.length; ii++ ) {\n\t\tvar s = signals[ ii ];\n\t\tthis.components.allSignals.push( s );\n\t}\n};\n\nNeuralNetwork.prototype.resetAllNeurons = function () {\n\n\tthis.numPassive = 0;\n\tfor ( var ii = 0; ii < this.components.neurons.length; ii++ ) { // reset all neuron state\n\t\tn = this.components.neurons[ ii ];\n\n\t\tif ( !n.fired ) {\n\t\t\tthis.numPassive += 1;\n\t\t}\n\n\t\tn.reset();\n\n\t}\n\t// console.log( 'numPassive =', this.numPassive );\n\n};\n\nNeuralNetwork.prototype.updateInfo = function () {\n\tthis.numNeurons = this.components.neurons.length;\n\tthis.numAxons = this.components.allAxons.length;\n\tthis.numSignals = this.components.allSignals.length;\n};\n\nNeuralNetwork.prototype.updateSettings = function () {\n\n\tthis.neuronUniforms.opacity.value = this.neuronOpacity;\n\n\tfor ( i = 0; i < this.components.neurons.length; i++ ) {\n\t\tthis.neuronAttributes.color.value[ i ].setStyle( this.neuronColor ); // initial neuron color\n\t}\n\tthis.neuronAttributes.color.needsUpdate = true;\n\n\tthis.neuronUniforms.sizeMultiplier.value = this.neuronSizeMultiplier;\n\n\tthis.axonUniforms.color.value.set( this.axonColor );\n\tthis.axonUniforms.opacityMultiplier.value = this.axonOpacityMultiplier;\n\n\tthis.particlePool.updateSettings();\n\n\n};\n\nNeuralNetwork.prototype.testChangOpcAttr = function () {\n\n\tvar opcArr = this.axonGeom.attributes.opacity.array;\n\tfor ( var i = 0; i < opcArr.length; i++ ) {\n\t\topcArr[ i ] = THREE.Math.randFloat( 0, 0.5 );\n\t}\n\tthis.axonGeom.attributes.opacity.needsUpdate = true;\n};\n"],"mappings":"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"}